// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  usage         Usage[]
  auditLogs     AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  provider             String   @default("paypal")
  paypalSubscriptionId String?  @unique
  status               String   // active, canceled, expired, pending
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  planId               String?  // PayPal plan ID
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model Usage {
  id                 String   @id @default(cuid())
  userId             String
  date               DateTime @default(now()) @db.Date
  openedBytesTotal   Int      @default(0)
  downloadsCount     Int      @default(0)
  documentsOpened    Int      @default(0)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date], map: "userId_date")
  @@index([userId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // import, export, edit, etc.
  fileSize  Int?     // in bytes
  metadata  Json?    // additional metadata
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}